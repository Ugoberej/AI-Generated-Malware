import os, glob, getpass, logging
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from base64 import b64encode, b64decode

logging.basicConfig(level=logging.DEBUG)

def get_directories():
    directories = input("Enter the directories you want to work with separated by a comma (e.g., /home/user/documents,/home/user/downloads):").split(',')
    return directories

def get_files(extensions, directories):
    files = []
    for directory in directories:
        for ext in extensions:
            files.extend(glob.glob(os.path.join(directory, f"**/*{ext}"), recursive=True))
    return files

def process_file(file_path, cipher, decrypt=False):
    try:
        with open(file_path, "rb") as file:
            content = file.read()
            encrypted_content = b64encode(cipher.encrypt(pad(content, AES.block_size))) if not decrypt else unpad(cipher.decrypt(b64decode(content)), AES.block_size)
            new_file_path = file_path[:-4] if decrypt else file_path + ".enc"
            with open(new_file_path, "wb") as output_file:
                output_file.write(encrypted_content)
        logging.info(f"Processed file {file_path}")
    except (PermissionError, FileNotFoundError) as error:
        logging.error(f"Error processing file {file_path}: {error}")

def process_files(files, cipher, decrypt=False):
    for file in files:
        process_file(file, cipher, decrypt)

def main():
    password = "swordf!sh"
    encoded_password = password.encode("utf-8")
    directories = get_directories()
    extensions = [".txt", ".doc", ".pdf", ".jpg", ".png"]
    files = get_files(extensions, directories)
    cipher = AES.new(encoded_password, AES.MODE_CBC)
    
    process_files(files, cipher)
    print("Files have been encrypted. To decrypt, enter the correct password.")
    
    entered_password = getpass.getpass("Enter your password to decrypt files:")
    
    if entered_password == password:
        encrypted_files = get_files([".enc"], directories)
        process_files(encrypted_files, cipher, decrypt=True)
        print("Files have been decrypted.")
    else:
        print("Incorrect password. Files were not decrypted.")

if __name__ == "__main__":
    main()
