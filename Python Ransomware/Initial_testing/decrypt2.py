import os
import tkinter as tk
from tkinter import simpledialog
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
from base64 import b64decode

ENCRYPTED_EXTENSION = ".enc"

def process_file(filepath, cipher):
    with open(filepath, 'rb') as f:
        content = f.read()

    try:
        decrypted_content = unpad(cipher.decrypt(b64decode(content)), AES.block_size)
    except ValueError as e:
        print(f"Error processing file {filepath}: {e}")
        return None

    new_filepath = filepath.replace(ENCRYPTED_EXTENSION, "")

    with open(new_filepath, 'wb') as f:
        f.write(decrypted_content)

    os.remove(filepath)
    return new_filepath

def process_enc_files(filepaths, cipher):
    for filepath in filepaths:
        new_filepath = process_file(filepath, cipher)
        if new_filepath:
            print(f"Processed file {filepath} -> {new_filepath}")
        else:
            print(f"Skipped file {filepath}")

def find_enc_files(start_path):
    found_files = []
    for root, _, files in os.walk(start_path):
        for file in files:
            if file.endswith(ENCRYPTED_EXTENSION):
                found_files.append(os.path.join(root, file))
    return found_files

def get_password(prompt):
    root = tk.Tk()
    root.withdraw()
    return simpledialog.askstring("Password", prompt, show="*")

def main():
    password = get_password("Enter your password to decrypt files:")
    encoded_password = password.encode()

    # Pad the password to the correct length (16 bytes)
    while len(encoded_password) < 16:
        encoded_password += b'\x00'

    cipher_decrypt = AES.new(encoded_password, AES.MODE_CBC)

    home_dir = os.path.expanduser("~")
    encrypted_files = find_enc_files(home_dir)

    process_enc_files(encrypted_files, cipher_decrypt)
    print("Decryption completed.")

if __name__ == "__main__":
    main()
